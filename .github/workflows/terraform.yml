name: Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
        id-token: write  # Required for OIDC role assumption
        contents: read   # Required for checking out the code
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_DEV_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

    # Create the S3 Bucket for Terraform state (if it doesn't exist)
      - name: Create S3 bucket for Terraform state
        run: |
            aws s3api create-bucket --bucket KDW-terraform-state --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1

    # Enable versioning on the S3 bucket (optional but recommended for Terraform state)
      - name: Enable versioning on S3 bucket
        run: |
            aws s3api put-bucket-versioning --bucket KDW-terraform-state --versioning-configuration Status=Enabled --region eu-central-1

        # Set up Terraform backend configuration for S3
      - name: Configure Terraform backend
        run: |
            echo 'terraform {' > backend.tf
            echo '  backend "s3" {' >> backend.tf
            echo '    bucket = "KDW-terraform-state"' >> backend.tf
            echo '    key    = "path/to/state/file"' >> backend.tf
            echo '    region = "eu-central-1"' >> backend.tf
            echo '  }' >> backend.tf
            echo '}' >> backend.tf

    # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
           terraform_version: 1.3.0

    # Initialize Terraform (this will configure the backend)
      - name: Terraform init
        run: terraform init

    # Apply Terraform configuration (optional, based on your use case)
      - name: Terraform apply
        run: terraform apply -auto-approve
