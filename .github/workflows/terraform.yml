# name: Terraform CI/CD

# on:
#   push:
#     branches:
#       - main

# jobs:
#   terraform:
#     runs-on: ubuntu-latest

#     permissions:
#         id-token: write  # Required for OIDC role assumption
#         contents: read   # Required for checking out the code
#     environment: dev

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up AWS OIDC credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           role-to-assume: ${{ secrets.AWS_DEV_ROLE_ARN }}
#           aws-region: ${{ secrets.AWS_REGION }}

#     # Create the S3 Bucket for Terraform state (if it doesn't exist)
#       - name: Create S3 bucket for Terraform state
#         run: |
#             aws s3api create-bucket --bucket KDW-terraform-state --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1

#     # Enable versioning on the S3 bucket (optional but recommended for Terraform state)
#       - name: Enable versioning on S3 bucket
#         run: |
#             aws s3api put-bucket-versioning --bucket KDW-terraform-state --versioning-configuration Status=Enabled --region eu-central-1

#         # Set up Terraform backend configuration for S3
#       - name: Configure Terraform backend
#         run: |
#             echo 'terraform {' > backend.tf
#             echo '  backend "s3" {' >> backend.tf
#             echo '    bucket = "KDW-terraform-state"' >> backend.tf
#             echo '    key    = "path/to/state/file"' >> backend.tf
#             echo '    region = "eu-central-1"' >> backend.tf
#             echo '  }' >> backend.tf
#             echo '}' >> backend.tf

#     # Install Terraform
#       - name: Install Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#            terraform_version: 1.3.0

#     # Initialize Terraform (this will configure the backend)
#       - name: Terraform init
#         run: terraform init

#     # Apply Terraform configuration (optional, based on your use case)
#       - name: Terraform apply
#         run: terraform apply -auto-approve
name: Terraform Infrastructure Automation

on:
  push:
    branches:
      - main  # Trigger on push to the main branch (adjust as needed)

env:
  AWS_REGION: "eu-central-1"  # Define your AWS region
  BUCKET_NAME: "kstate-bucket"  # Define your S3 bucket name
  TF_VERSION: "1.9.8"  # Define the Terraform version you want to use

jobs:
  terraform:
    runs-on: ubuntu-latest
    # environment: ${{ github.ref_name }}  # Use the branch name for environment (dev, sit, prod)
    permissions:
        id-token: write  # Required for OIDC role assumption
        contents: read   # Required for checking out the code
    environment: dev
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3


      # Set up AWS CLI and Terraform
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_DEV_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Install dependencies (if any, e.g., Terraform modules)
      - name: Install Terraform Dependencies
        run: terraform init

      # Terraform Plan & Apply based on environment (dev, sit, prod)
      - name: Terraform Apply for Dev Environment
        if: github.ref_name == 'dev'
        run: |
          terraform workspace select dev || terraform workspace new dev
          terraform apply -auto-approve -var-file=dev.tfvars

      - name: Terraform Apply for Sit Environment
        if: github.ref_name == 'sit'
        run: |
          terraform workspace select sit || terraform workspace new sit
          terraform apply -auto-approve -var-file=sit.tfvars

      - name: Terraform Apply for Prod Environment
        if: github.ref_name == 'prod'
        run: |
          terraform workspace select prod || terraform workspace new prod
          terraform apply -auto-approve -var-file=prod.tfvars
