name: Destroy Terraform Resources (DEV, SIT, PROD)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment to destroy (dev, sit, prod)'
        required: true
        default: 'dev'

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}  # Dynamically use the input environment

    permissions:
      id-token: write  # Required for OIDC authentication to assume IAM roles
      contents: read   # Access to repository contents

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}  # Use the AWS region from secrets
      TF_VAR_TF_STATE_BUCKET: ${{ 
        github.event.inputs.environment == 'prod' && secrets.PROD_TF_STATE_BUCKET ||
        github.event.inputs.environment == 'sit' && secrets.SIT_TF_STATE_BUCKET ||
        secrets.DEV_TF_STATE_BUCKET }}  # Dynamically select the appropriate S3 bucket for state storage
      # Dynamically select AWS_ROLE_ARN based on environment input
      AWS_ROLE_ARN: ${{ 
        github.event.inputs.environment == 'prod' && secrets.AWS_PROD_ROLE_ARN ||
        github.event.inputs.environment == 'sit' && secrets.AWS_SIT_ROLE_ARN ||
        secrets.AWS_DEV_ROLE_ARN }}  # Default to dev role if no match

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Terraform environment with the specified version
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8  # Ensure consistent Terraform version across all environments

      # Configure AWS credentials using the selected role for the environment
      - name: Configure AWS credentials
        id: aws_auth
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}  # Assume the appropriate role dynamically based on the environment
          aws-region: ${{ env.AWS_REGION }}  # Use the AWS region from the environment
        env:
          AWS_ROLE_ARN: ${{ env.AWS_ROLE_ARN }}  # Role ARN for assuming AWS role
          AWS_REGION: ${{ env.AWS_REGION }}  # AWS region
          TF_VAR_TF_STATE_BUCKET: ${{ env.TF_VAR_TF_STATE_BUCKET }}  # Use the state bucket dynamically based on the environment

      # Initialize Terraform for destruction
      - name: Terraform Init (Destroy)
        run: |
          set -e  # Exit on any error
          terraform init \
            -backend-config="bucket=${{ env.TF_VAR_TF_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment }}.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"  # Use the AWS region for backend

      # Generate the destruction plan
      - name: Terraform Plan (Destruction)
        run: |
          set -e
          terraform plan -destroy -out=tfplan -var-file=environments/${{ github.event.inputs.environment }}.tfvars  # Generate the destruction plan for the selected environment
          terraform show -no-color tfplan  # Display the plan for review (optional but recommended for transparency)

      # Manual approval step for production
      - name: Manual Approval (Destruction)
        if: ${{ github.event.inputs.environment == 'prod' }}  # Manual approval required for production
        run: |
          echo "Please manually approve the destruction for production."
          exit 1  # Exit the workflow and require manual intervention for production (this can be handled in GitHub environment settings)

      # Apply the Terraform destruction plan (automatically for non-prod environments)
      - name: Terraform Destroy
        run: |
          set -e
          terraform apply -auto-approve tfplan  # Apply the destruction plan
        if: ${{ github.event.inputs.environment != 'prod' }}  # Skip for prod if manual approval is required
